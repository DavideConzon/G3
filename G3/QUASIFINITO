import tkinter as tk
from tkinter import messagebox, ttk, filedialog
import csv
import hashlib
import cv2
import numpy as np
from PIL import Image, ImageTk
from tkinter import StringVar
import threading
import tensorflow as tf
import pandas as pd  

import sqlite3
from db import Database

"""FUNZIONAMENTO DI ACQUISIZIONE E ANALISI DA FOTOCAMERA"""
# Global variables for camera and model
global result_label, cap, camera_thread, interpreter, camera_selection

result_label = None
cap = None
camera_thread = None
camera_selection = None  # Declare camera_selection globally
# Load the TFLite model
interpreter = tf.lite.Interpreter(model_path=r"C:\Users\david\OneDrive\Desktop\G3\skin_cancer_best_model.tflite")
interpreter.allocate_tensors()

#Percorso del new_users.csv
#NEW_CSV_FILE = model_path=r"C:\Users\david\OneDrive\Desktop\G3\new_users.csv

# Get tensor details
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

# Define model classes
class_labels = ['Actinic Keratoses and\n Intraepithelial Carcinoma', 'Basal Cell Carcinoma', 
                'Benign Keratosis-like Lesions', 'Dermatofibroma', 'Melanoma', 
                'Melanocytic Nevi (nei)', 'Vascular Lesions']

# Global variable for captured image
captured_image = None
captured_frame = None
camera_running = False

# Function to preprocess the image
def preprocess_image(image):
    image = Image.fromarray(image).convert("RGB")
    image = image.resize((224, 224))  # Size used for training
    image_array = np.array(image) / 255.0
    image_array = np.expand_dims(image_array, axis=0).astype(np.float32)  # Add batch dimension
    return image_array

# Function to classify and display results for loaded image
def classify_image():
    global captured_image
    image_path = filedialog.askopenfilename()
    if image_path:
        # Preprocess the image
        image = Image.open(image_path).convert("RGB")
        image_array = preprocess_image(np.array(image))
        
        # Set input tensor for interpreter
        interpreter.set_tensor(input_details[0]['index'], image_array)
        interpreter.invoke()
        predictions = interpreter.get_tensor(output_details[0]['index'])[0]
        
        # Display image
        img = image.resize((500, 500))
        img_tk = ImageTk.PhotoImage(img)
        canvas.itemconfig(image_container, image=img_tk)
        canvas.image = img_tk  # Avoid image garbage collection
        captured_image = img_tk
        
        # Show results
        result_text = "Classification:\n"
        for label, prob in zip(class_labels, predictions):
            result_text += f"{label}: {prob * 100:.2f}%\n"
        
        result_label.config(text=result_text)
        
        # Save results to CSV
        results_df = pd.DataFrame({'Class': class_labels, 'Probability': predictions * 100})
        results_df.to_csv('classification_results.csv', index=False)

# Function to classify and display results for each frame
def classify_frame(frame):
    image_array = preprocess_image(frame)
    interpreter.set_tensor(input_details[0]['index'], image_array)
    interpreter.invoke()
    predictions = interpreter.get_tensor(output_details[0]['index'])[0]
    
    result_text = "Classification:\n"
    for label, prob in zip(class_labels, predictions):
        result_text += f"{label}: {prob * 100:.2f}%\n"
    
    result_label.config(text=result_text)

# Function to capture an image from the camera
def capture_image():
    global captured_image, captured_frame, camera_running
    camera_running = False  # Stop camera feed
    selected_camera = int(camera_selection.get())  # Use the global camera_selection
    cap = cv2.VideoCapture(selected_camera)
    ret, frame = cap.read()
    if ret:
        captured_frame = frame  # Store captured frame
        cv2.imwrite("captured_image.jpg", frame)
        print("Captured image saved as 'captured_image.jpg'")
        # Show captured image
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        img = Image.fromarray(frame_rgb)
        img = img.resize((500, 500))
        img_tk = ImageTk.PhotoImage(img)
        canvas.itemconfig(image_container, image=img_tk)
        canvas.image = img_tk
        captured_image = img_tk
    cap.release()

# Declare canvas and image_container globally
canvas = None
image_container = None

# Function to start the camera feed
def start_camera():
    global captured_image, captured_frame, camera_running, canvas, image_container
    camera_running = True  # Set camera state
    selected_camera = int(camera_selection.get())  # Use the global camera_selection
    captured_image = None  # Reset captured image
    captured_frame = None  # Reset captured frame
    cap = cv2.VideoCapture(selected_camera)
    
    def update_frame():
        global canvas, image_container
        if camera_running and cap.isOpened():
            ret, frame = cap.read()
            if ret:
                # Resize and display frame in Tkinter if no image is captured
                if captured_image is None:
                    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                    img = Image.fromarray(frame_rgb)
                    img = img.resize((500, 500))
                    img_tk = ImageTk.PhotoImage(img)
                    canvas.itemconfig(image_container, image=img_tk)
                    canvas.image = img_tk
                    
                    # Classify frame
                    classify_frame(frame_rgb)
            
            root.after(10, update_frame)  # Update frame every 10 ms
        else:
            cap.release()

    update_frame()  # Start frame update


def show_camera_screen(user_name, user_role):
    global canvas, image_container
    for widget in root.winfo_children():
        widget.destroy()

    camera_frame = tk.Frame(root, bg='#f0f0f0', padx=20, pady=20)
    camera_frame.pack(fill=tk.BOTH, expand=True)

    tk.Label(camera_frame, text=f"Welcome {user_name}, Role: {user_role}", font=("Arial", 16), bg='#f0f0f0', fg="#333").pack(pady=20)

    # Add Back Button
    back_button = ttk.Button(camera_frame, text="Back", command=show_login_screen)
    back_button.pack(pady=10)

    global camera_selection
    camera_selection = StringVar(value="0")  # Set default to first camera
    camera_dropdown_label = tk.Label(camera_frame, text="Select Camera:", bg="#ffffff", font=("Arial", 12))
    camera_dropdown_label.pack(pady=5)

    camera_dropdown = ttk.Combobox(camera_frame, textvariable=camera_selection, values=["0", "1", "2"], state="readonly")
    camera_dropdown.pack(pady=10)

    # Buttons for camera actions
    btn_camera = ttk.Button(camera_frame, text="Start Camera", command=start_camera)
    btn_camera.pack(pady=10)

    btn_load_image = ttk.Button(camera_frame, text="Load Image", command=classify_image)
    btn_load_image.pack(pady=10)

    btn_capture_image = ttk.Button(camera_frame, text="Capture Image", command=capture_image)
    btn_capture_image.pack(pady=10)

    stop_camera_button = ttk.Button(camera_frame, text="Stop Camera", command=stop_camera)
    stop_camera_button.pack(pady=10)

    global result_label
    result_label = ttk.Label(camera_frame, text="Classification:", justify="left", background="#ffffff", anchor="n", font=("Arial", 12, "bold"))
    result_label.pack(pady=20, padx=10, fill="both", expand=True)

    # Create a canvas for displaying the image
    canvas = tk.Canvas(camera_frame, width=500, height=500)
    canvas.pack(pady=20)
    image_container = canvas.create_image(250, 250, anchor=tk.CENTER)
# Function to stop the camera
def stop_camera():
    global camera_running
    camera_running = False


"""FUNZIONALITA' DI LOGIN/REGISTER"""
# Initialize database
db = Database()

# Patient class
class Paziente:
    def __init__(self, nome, cognome, data_nascita, sesso, codice_fiscale, indirizzo, telefono, email, patologie_precedenti, farmaci_assunti):
        self.nome = nome
        self.cognome = cognome
        self.data_nascita = data_nascita
        self.sesso = sesso
        self.codice_fiscale = codice_fiscale
        self.indirizzo = indirizzo
        self.telefono = telefono
        self.email = email
        self.patologie_precedenti = patologie_precedenti
        self.farmaci_assunti = farmaci_assunti

    def visualizza_anagrafica(self):
        return f"Nome: {self.nome} {self.cognome}\nEmail: {self.email}\nTelefono: {self.telefono}"

# Function to hash the password
def hash_password(password):
    return hashlib.sha256(password.encode('utf-8')).hexdigest()

# Function to register a user
def register_user(name, role, email, password):
    if not all([name, role, email, password]):
        messagebox.showerror("Errore", "Tutti i campi sono obbligatori!")
        return

    hashed_password = hash_password(password)

    if db.register_user(name, role, email, hashed_password):  # Use the method from Database class
        messagebox.showinfo("Registrazione", "Registrazione completata con successo!")
    else:
        messagebox.showerror("Errore", "Errore durante la registrazione: Email gi√† registrata.")

# Function to login a user
def login_user(email, password):
    if not email or not password:
        messagebox.showerror("Errore", "Email e Password sono obbligatorie!")
        return

    hashed_password = hash_password(password)
    user = db.authenticate_user(email, hashed_password)  # Use the method from Database class

    if user:
        messagebox.showinfo("Successo", "Login effettuato con successo!")
        name, role = user
        show_role_screen(name, role)  # Rimuovi il parametro password qui
    else:
        messagebox.showerror("Errore", "Credenziali non valide!")

def show_welcome_screen():
    global camera_label, result_label, canvas, image_container, user_name, user_role

    # Stop the camera if it is running
    stop_camera()
    camera_label = None

    # Destroy the existing screen and load the welcome screen
    for widget in root.winfo_children():
        widget.destroy()

    # Main container frame
    welcome_frame = tk.Frame(root, bg="#f7f9fc")
    welcome_frame.pack(fill=tk.BOTH, expand=True)

    # Welcome message
    tk.Label(welcome_frame, text="Benvenuto nel Sistema di Gestione Pazienti",
             font=("Arial", 20, "bold"), bg="#f7f9fc", fg="#333").pack(pady=30)

    # Optional logo handling
    try:
        logo_image = Image.open("logo.png")  # Replace with your logo path
        logo_image = logo_image.resize((150, 150))  # Resize as needed
        logo_photo = ImageTk.PhotoImage(logo_image)
        logo_label = tk.Label(welcome_frame, image=logo_photo, bg="#f7f9fc")
        logo_label.pack()
        welcome_frame.logo_image = logo_photo  # Keep reference to avoid garbage collection
    except Exception as e:
        print(f"Could not load logo: {e}")
        # If the logo fails to load, just continue without it

    # Buttons for Login and Registration
    button_style = {"font": ("Arial", 14, "bold"), "bg": "#4CAF50", "fg": "white", "activebackground": "#45a049"}
    tk.Button(welcome_frame, text="Accedi", command=show_login_screen, **button_style, width=15).pack(pady=20)
    tk.Button(welcome_frame, text="Registrati", command=show_registration_screen, **button_style, width=15).pack(pady=10)

    # Footer text
    tk.Label(welcome_frame, text="Gestione completa per pazienti e analisi mediche",
             font=("Arial", 10, "italic"), bg="#f7f9fc", fg="#666").pack(pady=30)

    # Additional logic for user roles: Medico or Admin
    if user_role:
        tk.Label(welcome_frame, text=f"Benvenuto {user_name}, come {user_role}",
                 font=("Arial", 14, "bold"), bg="#f7f9fc", fg="#333").pack(pady=20)

        # Add a "Back" button for returning to the login or welcome screen
        back_button = ttk.Button(welcome_frame, text="Back", command=show_login_screen)
        back_button.pack(pady=10)

def show_patient_screen(name, email):
    clear_frame()

    # Fetch patient details from the database
    conn = sqlite3.connect('app_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM patients WHERE email = ?", (email,))
    patient_data = cursor.fetchone()
    conn.close()

    if patient_data:
        paziente = Paziente(*patient_data[1:])  # Ignoring the ID which is the first column
        tk.Label(root, text=f"Welcome, {paziente.nome} {paziente.cognome}", font=("Arial", 16)).pack(pady=20)
        # You can now display attributes from the `Paziente` object, e.g.
        tk.Label(root, text=f"Date of Birth: {paziente.data_nascita}", font=("Arial", 12)).pack(pady=5)
        # Continue for other attributes
    else:
        tk.Label(root, text="No patient information found.", font=("Arial", 16)).pack(pady=20)

    
# Function to show login screen
def show_login_screen():
    clear_frame()
    login_frame = tk.Frame(root)
    login_frame.pack(fill=tk.BOTH, expand=True)

    # Create back button
    create_back_button(login_frame, show_welcome_screen)


    tk.Label(login_frame, text="Login", font=("Arial", 16)).pack(pady=20)

    tk.Label(login_frame, text="Email:").pack()
    email_entry = tk.Entry(login_frame)
    email_entry.pack(pady=5)

    tk.Label(login_frame, text="Password:").pack()
    password_entry = tk.Entry(login_frame, show="*")
    password_entry.pack(pady=5)

    ttk.Button(login_frame, text="Login", command=lambda: login_user(email_entry.get(), password_entry.get())).pack(pady=10)
    ttk.Button(login_frame, text="Registrati", command=show_registration_screen).pack()

# Function to show registration screen
def show_registration_screen():
    clear_frame()
    register_frame = tk.Frame(root)
    register_frame.pack(fill=tk.BOTH, expand=True)

    # Create back button
    create_back_button(register_frame, show_welcome_screen)


    tk.Label(register_frame, text="Registrazione", font=("Arial", 16)).pack(pady=20)

    tk.Label(register_frame, text="Nome:").pack()
    name_entry = tk.Entry(register_frame)
    name_entry.pack(pady=5)

    tk.Label(register_frame, text="Ruolo:").pack()
    role_var = tk.StringVar(value="Seleziona un ruolo")
    roles = ["Admin", "Medico", "User", "Guest"]
    role_menu = tk.OptionMenu(register_frame, role_var, *roles)
    role_menu.pack(pady=5)

    tk.Label(register_frame, text="Email:").pack()
    email_entry = tk.Entry(register_frame)
    email_entry.pack(pady=5)

    tk.Label(register_frame, text="Password:").pack()
    password_entry = tk.Entry(register_frame, show="*")
    password_entry.pack(pady=5)

    ttk.Button(register_frame, text="Registrati", command=lambda: register_user(
        name_entry.get(), role_var.get(), email_entry.get(), password_entry.get())).pack(pady=10)

# Utility to clear the frame
def clear_frame():
    for widget in root.winfo_children():
        widget.destroy()

# Function to show the role screen
def show_role_screen(user_name, user_role):
    global camera_selection, result_label, canvas, image_container

    # Clear the current screen
    for widget in root.winfo_children():
        widget.destroy()

    # Set up the role-specific screen (Medico or Admin)
    role_frame = tk.Frame(root, bg='#f0f0f0', padx=20, pady=20)
    role_frame.pack(fill=tk.BOTH, expand=True)

    # Create the "Back" button that will take the user to the welcome screen
    back_button = ttk.Button(role_frame, text="Back", command=show_welcome_screen)  # Adjust command if necessary
    back_button.pack(pady=10)

    # Display user name and role
    tk.Label(role_frame, text=f"Welcome {user_name}, Role: {user_role}", font=("Arial", 16), bg='#f0f0f0', fg="#333").pack(pady=20)

    # Modifica della chiamata nel bottone
    register_patient_button = ttk.Button(role_frame, text="Registra Paziente", command=lambda: show_patient_registration_screen(user_name, user_role))
    register_patient_button.pack(pady=20)


    # Set up the camera frame (existing functionality)
    camera_frame = tk.Frame(root, bg='#f0f0f0', padx=20, pady=20)
    camera_frame.pack(fill=tk.BOTH, expand=True)

    # Camera selection dropdown
    camera_selection = StringVar(value="0")
    camera_dropdown_label = tk.Label(camera_frame, text="Select Camera:", bg="#ffffff", font=("Arial", 12))
    camera_dropdown_label.pack(pady=5)

    camera_dropdown = ttk.Combobox(camera_frame, textvariable=camera_selection, values=["0", "1", "2"], state="readonly")
    camera_dropdown.pack(pady=10)

    # Buttons to control camera (existing functionality)
    btn_start_camera = ttk.Button(camera_frame, text="Start Camera", command=start_camera)
    btn_start_camera.pack(pady=10)

    btn_stop_camera = ttk.Button(camera_frame, text="Stop Camera", command=stop_camera)
    btn_stop_camera.pack(pady=10)

    # Button to load and classify image
    btn_load_image = ttk.Button(camera_frame, text="Load Image", command=classify_image)
    btn_load_image.pack(pady=10)

    # Button to capture an image
    btn_capture_image = ttk.Button(camera_frame, text="Capture Image", command=capture_image)
    btn_capture_image.pack(pady=10)

    # Results label for classification (existing functionality)
    result_label = ttk.Label(camera_frame, text="Classification:", justify="left", background="#ffffff", anchor="n", font=("Arial", 12, "bold"))
    result_label.pack(pady=20, padx=10, fill="both", expand=True)

    # Create a canvas for displaying the image
    canvas = tk.Canvas(camera_frame, width=500, height=500)
    canvas.pack(pady=20)
    image_container = canvas.create_image(250, 250, anchor=tk.CENTER)

    # Back Button to go to previous screen
    back_button = ttk.Button(camera_frame, text="Back", command=show_welcome_screen)  # Adjust command if necessary
    back_button.pack(pady=10)


# Funzione per mostrare la schermata di registrazione del paziente
def show_patient_registration_screen(user_name, user_role):
    clear_frame()

    # Crea il frame per la registrazione del paziente
    registration_frame = tk.Frame(root, bg='#f7f9fc', padx=20, pady=20)
    registration_frame.pack(fill=tk.BOTH, expand=True)

    # Titolo del form
    tk.Label(registration_frame, text="Registra Paziente", font=("Arial", 16, "bold"), bg='#f7f9fc').pack(pady=20)

    # Form dei dettagli del paziente
    fields = ["Nome", "Cognome", "Data di Nascita", "Sesso", "Codice Fiscale", "Indirizzo", "Telefono", "Email", "Patologie Precedenti", "Farmaci Assunti"]
    entries = {}

    for field in fields:
        tk.Label(registration_frame, text=field + ":").pack(pady=5)
        entry = tk.Entry(registration_frame)
        entry.pack(pady=5)
        entries[field] = entry

    # Frame per i pulsanti "Salva Paziente" e "Indietro"
    buttons_frame = tk.Frame(registration_frame, bg='#f7f9fc')
    buttons_frame.pack(fill=tk.X, pady=20)

    # Bottone per inviare i dati del paziente (a sinistra)
    submit_button = ttk.Button(buttons_frame, text="Salva Paziente", command=lambda: save_patient(entries, user_name))
    submit_button.pack(side=tk.LEFT, padx=10)

    # Bottone per tornare alla schermata precedente (a destra)
    create_back_button(buttons_frame, lambda: show_role_screen(user_name, user_role))
    buttons_frame.pack()



# Function to save patient data
def save_patient(entries, user_name):
    # Extract values from the entries
    patient_data = {field: entries[field].get() for field in entries}

    # Check for missing fields
    if any(value == "" for value in patient_data.values()):
        messagebox.showerror("Errore", "Tutti i campi sono obbligatori!")
        return

    # Retrieve the user_id from the current session
    db = Database()
    user = db.authenticate_user(user_name, password)  # Passing user_name and password
    if user:
        user_id = user[0]  # The user ID is the first element returned

        # Call the add_patient method to save the patient's data
        if db.add_patient(patient_data["Nome"], patient_data["Cognome"], patient_data["Data di Nascita"],
                          patient_data["Sesso"], patient_data["Codice Fiscale"], patient_data["Indirizzo"],
                          patient_data["Telefono"], patient_data["Email"], patient_data["Patologie Precedenti"],
                          patient_data["Farmaci Assunti"], user_id):
            messagebox.showinfo("Successo", "Paziente registrato con successo!")
        else:
            messagebox.showerror("Errore", "Codice Fiscale gi√† esistente!")
    else:
        messagebox.showerror("Errore", "Utente non autenticato!")
    pass
# Function to create back button
def create_back_button(parent, back_command):
    back_button = tk.Button(parent, text="Back", command=back_command)
    back_button.pack(pady=10)
    return back_button


# Main function to run the application
def main():
    global root
    root = tk.Tk()
    root.title("Sistema di Gestione Pazienti")
    root.geometry("800x600")
    show_login_screen()
    root.mainloop()

if __name__ == "__main__":
    main()
