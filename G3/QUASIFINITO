import tkinter as tk
from tkinter import messagebox, ttk
import csv
import hashlib
import cv2
import numpy as np
from PIL import Image, ImageTk
from tkinter import StringVar

# Funzione per l'hashing della password
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# Funzione per la registrazione
def register_user(name, role, email, password):
    hashed_password = hash_password(password)
    with open('users.csv', 'a', newline='') as file:
        writer = csv.writer(file)
        writer.writerow([name, role, email, hashed_password])
    messagebox.showinfo("Registrazione", "Registrazione completata con successo!")

# Funzione per la gestione del login
def login_callback(email_entry, password_entry):
    email = email_entry.get()
    password = password_entry.get()

    if not email or not password:
        messagebox.showerror("Errore", "Email e Password sono obbligatori!")
        return

    hashed_password = hash_password(password)
    
    with open('users.csv', 'r') as file:
        reader = csv.reader(file)
        for row in reader:
            if row[3] == email and row[5] == hashed_password:
                user_role = row[2]
                user_name = row[0]
                show_camera_screen(user_name, user_role)  # Passa alla fotocamera
                return
    messagebox.showerror("Errore", "Credenziali non valide!")


# Funzione per la schermata della fotocamera
def show_camera_screen(user_name, user_role):
    # Pulisce la schermata precedente
    for widget in root.winfo_children():
        widget.destroy()

    camera_frame = tk.Frame(root, bg='#f0f0f0', padx=20, pady=20)
    camera_frame.pack(fill=tk.BOTH, expand=True)

    tk.Label(camera_frame, text=f"Benvenuto {user_name}, ruolo: {user_role}", font=("Arial", 16), bg='#f0f0f0', fg="#333").pack(pady=20)

    # Aggiungi i pulsanti per la fotocamera
    camera_selection = StringVar(value="0")
    camera_dropdown_label = tk.Label(camera_frame, text="Seleziona Videocamera:", bg="#ffffff", font=("Arial", 12))
    camera_dropdown_label.pack(pady=5)

    camera_dropdown = ttk.Combobox(camera_frame, textvariable=camera_selection, values=["0", "1", "2"], state="readonly")
    camera_dropdown.pack(pady=10)

    btn_camera = ttk.Button(camera_frame, text="Avvia Videocamera", command=start_camera)
    btn_camera.pack(pady=10)

    btn_load_image = ttk.Button(camera_frame, text="Carica Immagine", command=classify_image)
    btn_load_image.pack(pady=10)

    btn_capture_image = ttk.Button(camera_frame, text="Cattura Immagine", command=capture_image)
    btn_capture_image.pack(pady=10)

    result_label = ttk.Label(camera_frame, text="Classificazione:", justify="left", background="#ffffff", anchor="n", font=("Arial", 12, "bold"))
    result_label.pack(pady=20, padx=10, fill="both", expand=True)

# Funzione per avviare la fotocamera
def start_camera():
    # Apre la fotocamera e visualizza il video (puoi aggiungere il codice per la classificazione qui)
    cap = cv2.VideoCapture(0)
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break
        cv2.imshow("Video", frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):  # Premi 'q' per uscire
            break
    cap.release()
    cv2.destroyAllWindows()

# Funzione per caricare un'immagine e fare la classificazione
def classify_image():
    file_path = tk.filedialog.askopenfilename()
    if file_path:
        img = Image.open(file_path)
        img = img.resize((300, 300))
        img = ImageTk.PhotoImage(img)
        # Puoi fare qui il codice per classificare l'immagine
        messagebox.showinfo("Caricamento immagine", "Immagine caricata con successo!")

# Funzione per catturare un'immagine dalla fotocamera
def capture_image():
    cap = cv2.VideoCapture(0)
    ret, frame = cap.read()
    if ret:
        cv2.imwrite("captured_image.jpg", frame)
        messagebox.showinfo("Immagine Catturata", "Immagine catturata con successo!")
    cap.release()

# Funzione per la registrazione
def show_registration_screen():
    for widget in root.winfo_children():
        widget.destroy()

    register_frame = tk.Frame(root, bg='#f0f0f0', padx=20, pady=20)
    register_frame.pack(fill=tk.BOTH, expand=True)

    tk.Label(register_frame, text="Registrazione", font=("Arial", 16), bg='#f0f0f0', fg="#333").pack(pady=20)

    tk.Label(register_frame, text="Nome:", bg="#ffffff", font=("Arial", 12)).pack(pady=5)
    name_entry = tk.Entry(register_frame, font=("Arial", 12))
    name_entry.pack(pady=5)

    tk.Label(register_frame, text="Ruolo (Admin/Medico/User/Guest):", bg="#ffffff", font=("Arial", 12)).pack(pady=5)
    role_entry = tk.Entry(register_frame, font=("Arial", 12))
    role_entry.pack(pady=5)

    tk.Label(register_frame, text="Email:", bg="#ffffff", font=("Arial", 12)).pack(pady=5)
    email_entry = tk.Entry(register_frame, font=("Arial", 12))
    email_entry.pack(pady=5)

    tk.Label(register_frame, text="Password:", bg="#ffffff", font=("Arial", 12)).pack(pady=5)
    password_entry = tk.Entry(register_frame, font=("Arial", 12), show="*")
    password_entry.pack(pady=5)

    def register_action():
        name = name_entry.get()
        role = role_entry.get()
        email = email_entry.get()
        password = password_entry.get()
        if not name or not role or not email or not password:
            messagebox.showerror("Errore", "Tutti i campi sono obbligatori!")
        else:
            register_user(name, role, email, password)
            show_login_screen()

    register_button = ttk.Button(register_frame, text="Registrati", command=register_action)
    register_button.pack(pady=20)

    switch_to_login_button = ttk.Button(register_frame, text="Gi√† registrato? Accedi", command=show_login_screen)
    switch_to_login_button.pack(pady=10)

# Funzione per la schermata di login
def show_login_screen():
    for widget in root.winfo_children():
        widget.destroy()

    login_frame = tk.Frame(root, bg='#f0f0f0', padx=20, pady=20)
    login_frame.pack(fill=tk.BOTH, expand=True)

    tk.Label(login_frame, text="Login", font=("Arial", 16), bg='#f0f0f0', fg="#333").pack(pady=20)

    tk.Label(login_frame, text="Email:", bg="#ffffff", font=("Arial", 12)).pack(pady=5)
    email_entry = tk.Entry(login_frame, font=("Arial", 12))
    email_entry.pack(pady=5)

    tk.Label(login_frame, text="Password:", bg="#ffffff", font=("Arial", 12)).pack(pady=5)
    password_entry = tk.Entry(login_frame, font=("Arial", 12), show="*")
    password_entry.pack(pady=5)

    login_button = ttk.Button(login_frame, text="Accedi", command=lambda: login_callback(email_entry, password_entry))
    login_button.pack(pady=20)

    switch_to_register_button = ttk.Button(login_frame, text="Non hai un account? Registrati", command=show_registration_screen)
    switch_to_register_button.pack(pady=10)

# Impostazioni dell'interfaccia principale
root = tk.Tk()
root.title("App con Login e Fotocamera")
root.geometry("600x600")

# Mostra la schermata di login all'inizio
show_login_screen()

root.mainloop()
